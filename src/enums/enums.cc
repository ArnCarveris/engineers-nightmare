/* THIS FILE IS AUTOGENERATED BY gen/gen_enums.py; DO NOT HAND-MODIFY */

#include "enums.h"

#include <cassert>
#include <cstring>

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

const char* get_enum_string(placement value) {
    switch(value)
    {
    case placement::full_block_snapped:
        return "placement::full_block_snapped";
    case placement::half_block_snapped:
        return "placement::half_block_snapped";
    case placement::quarter_block_snapped:
        return "placement::quarter_block_snapped";
    case placement::eighth_block_snapped:
        return "placement::eighth_block_snapped";
    default:
        assert(false);
        return nullptr;
    }
}

template<> placement get_enum<placement>(const char *e) {
    auto _placement{placement::invalid};
    if (!strcmp(e, "placement::full_block_snapped")) {
        _placement = placement::full_block_snapped;
    }
    if (!strcmp(e, "placement::half_block_snapped")) {
        _placement = placement::half_block_snapped;
    }
    if (!strcmp(e, "placement::quarter_block_snapped")) {
        _placement = placement::quarter_block_snapped;
    }
    if (!strcmp(e, "placement::eighth_block_snapped")) {
        _placement = placement::eighth_block_snapped;
    }
    return _placement;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

const char* get_enum_string(rotation value) {
    switch(value)
    {
    case rotation::axis_aligned:
        return "rotation::axis_aligned";
    case rotation::rot_45:
        return "rotation::rot_45";
    case rotation::rot_15:
        return "rotation::rot_15";
    default:
        assert(false);
        return nullptr;
    }
}

template<> rotation get_enum<rotation>(const char *e) {
    auto _rotation{rotation::invalid};
    if (!strcmp(e, "rotation::axis_aligned")) {
        _rotation = rotation::axis_aligned;
    }
    if (!strcmp(e, "rotation::rot_45")) {
        _rotation = rotation::rot_45;
    }
    if (!strcmp(e, "rotation::rot_15")) {
        _rotation = rotation::rot_15;
    }
    return _rotation;
}

